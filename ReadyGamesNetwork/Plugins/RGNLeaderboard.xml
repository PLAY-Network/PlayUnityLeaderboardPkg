<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGNLeaderboard</name>
    </assembly>
    <members>
        <member name="T:RGN.Modules.Leaderboard.LeaderboardModule">
            <summary>
            This module is responsible for player scores and ranks players according to their totals.
            </summary>
        </member>
        <member name="T:RGN.Modules.Leaderboard.LeaderboardModule.Admin">
            <summary>
            Handles critical operations for Leaderboard data
            </summary>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.Admin.AddLeaderboardAsync(RGN.Modules.Leaderboard.LeaderboardData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new leaderboard
            Resulting string contains leaderboard id of the new created leaderboard
            </summary>
            <param name="leaderboardData">Leaderboard data to set up</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>Leaderboard Id</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.Admin.UpdateLeaderboardAsync(RGN.Modules.Leaderboard.LeaderboardData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates existing leaderboard
            Resulting string contains leaderboard id of the updated leaderboard
            </summary>
            <param name="leaderboardData">Leaderboard data with the new settings</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>Leaderboard Id</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.Admin.DeleteLeaderboardAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes existing leaderboard
            </summary>
            <param name="leaderboardId">Leaderboard id to remove</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetLeaderboardByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous method that retrieves leaderboard data.
            Resulting Data contains leaderboard description fields like id, name, type, etc.
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetLeaderboardByRequestNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous method that retrieves leaderboard data.
            Resulting Data contains leaderboard description fields like id, name, type, etc.
            </summary>
            <param name="requestName"></param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetLeaderboardByRequestNamesAsync(System.Collections.Generic.List{System.String},System.Int32,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronous method that retrieves leaderboards data.
            Resulting Data contains leaderboard description fields like id, name, type, etc.
            </summary>
            <param name="requestNames"></param>
            /// <param name="limit">An integer indicating the maximum number of leaderboards to retrieve.</param>
            <param name="startAfter">An optional parameter representing an leaderboard 'updatedAt' field after which start the retrieval</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the leaderboard
            retrieval process. The default is false.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetLeaderboardByAppIdsAsync(System.Collections.Generic.List{System.String},System.Int32,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a list of leaderboards from the Ready Games Network (RGN) store based on
            the provided application identifiers.
            </summary>
            <param name="appIds">A list of application identifiers used to filter the leaderboards.</param>
            <param name="limit">An integer indicating the maximum number of leaderboards to retrieve.</param>
            <param name="startAfter">An optional parameter representing an leaderboard 'updatedAt' field after which start the retrieval</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the leaderboard
            retrieval process. The default is false.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided appIds list is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Leaderboard.LeaderboardData"/> objects representing the leaderboard that match the specified application identifiers,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetLeaderboardByTagsAsync(System.Collections.Generic.List{System.String},System.Int32,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a list of leaderboards from the Ready Games Network (RGN) store based on
            the provided tags.
            </summary>
            <param name="tags">A list of tags used to filter the leaderboards.</param>
            <param name="limit">An integer indicating the maximum number of leaderboards to retrieve.</param>
            <param name="startAfter">An optional parameter representing an leaderboard 'updatedAt' field after which start the retrieval</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the leaderboard
            retrieval process. The default is false.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided tags list is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Leaderboard.LeaderboardData"/> objects representing the leaderboards that match the specified tags,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetLeaderboardByIdsAsync(System.Collections.Generic.List{System.String},System.Int32,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a list of leaderboards from the Ready Games Network (RGN) store based on
            the provided leaderboard identifiers.
            </summary>
            <param name="ids">A list of leaderboard identifiers used to filter the leaderboards.</param>
            <param name="limit">An integer indicating the maximum number of leaderboards to retrieve.</param>
            <param name="startAfter">An optional parameter representing an leaderboard 'updatedAt' field after which start the retrieval</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the leaderboard
            retrieval process. The default is false.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided appIds list is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Leaderboard.LeaderboardData"/> objects representing the leaderboard that match the specified application identifiers,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetLeaderboardForCurrentAppAsync(System.Int32,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a list of leaderboards for the current application from the Ready Games Network (RGN).
            </summary>
            <param name="limit">An integer indicating the maximum number of leaderboards to retrieve.</param>
            <param name="startAfter">An optional parameter representing an leaderboard 'updatedAt' field after which start the retrieval</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the leaderboard
            retrieval process. The default is false.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list
            of <see cref="T:RGN.Modules.Leaderboard.LeaderboardData"/> objects representing the leaderboards that match the current application identifier,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetLeaderboardIdsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method to retrieve leaderboard ids defined for current project
            </summary>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the leaderboard
            retrieval process. The default is false.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.IsLeaderboardAvailableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method to retrieve available status of leaderboard
            </summary>
            <param name="leaderboardId">The ID of the leaderboard which status will be checked.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.IsInPromoPeriodAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method to retrieve available status of leaderboard
            </summary>
            <param name="leaderboardId">The ID of the leaderboard which status will be checked.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.IsInGracePeriodAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method to retrieve available status of leaderboard
            </summary>
            <param name="leaderboardId">The ID of the leaderboard which status will be checked.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.SetScoreAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sets the player's score on the specified leaderboard.
            </summary>
            <param name="leaderboardId">The ID of the leaderboard where the score will be set.</param>
            <param name="score">The score to be set on the leaderboard.</param>
            <param name="extraData">(Optional) Extra data associated with the score. Defaults to an empty string if not provided.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the player's place after setting the score.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.AddScoreAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds the player's score on the specified leaderboard.
            </summary>
            <param name="leaderboardId">The ID of the leaderboard where the score will be added.</param>
            <param name="score">The score to be added on the leaderboard.</param>
            <param name="extraData">(Optional) Extra data associated with the score. Defaults to an empty string if not provided.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the player's place after setting the score.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetUserEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the player's entry on the specified leaderboard.
            </summary>
            <param name="leaderboardId">The ID of the leaderboard from which the entry will be retrieved.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the player's entry data on the leaderboard.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetEntriesAsync(System.String,System.Int32,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a specified number of top entries and entries around the user from the specified leaderboard.
            </summary>
            <param name="leaderboardId">The ID of the leaderboard from which the entries will be retrieved.</param>
            <param name="quantityTop">The number of top entries to retrieve from the leaderboard.</param>
            <param name="includeUser">Whether to include the user's entry in the retrieved entries.</param>
            <param name="quantityAroundUser">The number of entries to retrieve around the user's entry.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a list of the retrieved leaderboard entries.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetResetsAsync(System.String,System.Boolean,System.Int64,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves leaderboard resets. Every time the leaderboard resets the results are stored in the history.
            This method allows to retreive the history of the leaderboard resets.
            </summary>
            <param name="leaderboardId">The ID of the leaderboard from which the entries will be retrieved.</param>
            <param name="withEntries">Flag to include user entries in the response.</param>
            <param name="startAfter">The start time in milliseconds since midnight, January 1, 1970 UTC, based on 'resetAt'.</param>
            <param name="limit">The maximum number of resets to retrieve.</param>
            <param name="orderDirection">The order direction for the resets. Accepted values 'asc' or 'desc'.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a list of the retrieved leaderboard resets.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.GetResetAsync(System.String,System.String,System.Int64,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves leaderboard reset by leaderboard and reset IDs. The result includes the user entries.
            </summary>
            <param name="leaderboardId">The ID of the leaderboard from which the reset user entries will be retrieved.</param>
            <param name="resetId">The unique reset ID of the leaderboard</param>
            <param name="startAfter">The start after based on 'place'.</param>
            <param name="limit">The maximum number of user entries to retrieve.</param>
            <param name="orderDirection">The order direction for the user entries. Accepted values 'asc' or 'desc'.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the retrieved leaderboard reset with user entries.</returns>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardModule.ResetLeaderboardAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Reset leaderboard. Gives the rewards to the users and resets the leaderboard.
            Requires project admin access.
            </summary>
            <param name="leaderboardId">The ID of the leaderboard to reset.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="T:RGN.Modules.Leaderboard.LeaderboardData">
            <summary>
            A class that represents a leaderboard on Ready Games Network.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.id">
            <summary>
            Unique id of the leaderboard
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.appIds">
            <summary>
            List of application ids where this leaderboard is used
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.requestName">
            <summary>
            Leaderboard request name. This value can be used to query leaderboards
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.tags">
            <summary>
            Leaderboard tags list. It is used to filter the leaderboards.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.name">
            <summary>
            Leaderboard name
            Is used also to store localization key for the name
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.description">
            <summary>
            Leaderboard description
            Is used also to store localization key for the description
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.setBy">
            <summary>
            Define who can set/add score to the leaderboard. 'server' or 'client'
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.invertSortOrder">
            <summary>
            Sorting direction:
            false - places are sorted in descending order;
            true - places are sorted in ascending order.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.decimalOffset">
            <summary>
            This parameter determines how many digits of the score integer are displayed
            after the decimal point.
            The size of the decimal part
            e.g., with decimalOffset: 2, the number 1234 will be displayed as 12.34.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.type">
            <summary>
            The leaderboard type that determines the results unit.Possible values:
            numeric — Number.
            time — Time in milliseconds.
            Default value is numeric
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.rewardsAtReset">
            <summary>
            Rewards which will be earned at reset period
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.rewardsDrawType">
            <summary>
            The leaderboard rewards draw type that determines how the leaderboard should draw rewards. Possible values:
            placeBased — Rewards will be drawn accordingly users places.
            scoreBased — Rewards will be drawn randomly, but users with higher score will have more chance to win.
            scoreBasedOnePerUser - Same as the scoreBased, but with limitation for one reward at whole leaderboard per one user
            scoreBasedOnePerUserAndReward - Same as the scoreBased, but with limitation for one unique reward per one user
            but different rewards could be added to same user
            Default value is placeBased
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.createdAt">
            <summary>
            Date and time when the leaderboard was created
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.updatedAt">
            <summary>
            Date and time when the leaderboard was last time updated
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.createdBy">
            <summary>
            User Id who created the leaderboard
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.updatedBy">
            <summary>
            User Id who last time updated the leaderboard
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.time">
            <summary>
            The time when the leaderboard is available
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.requiredToJoin">
            <summary>
            Specifies if the user need to have a gamepass or virtual item to join the leaderboard
            Join the leaderboard means to submit scores to the leaderboard
            In case the user does not have the required item, the score change is ignored
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.autoClaim">
            <summary>
            Indicates whether the leaderboard rewards are automatically claimed by the user. If false, the rewards must
            be claimed manually.The time.end is required and optionally time.grace to be set if autoClaim is true.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.participationFees">
            <summary>
            List of participation fees for the leaderboard.
            The fees are deducted when the user sets or adds a score to the leaderboard for the first time.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardData.totalEntriesNumber">
            <summary>
            Number of entries in the leaderboard
            </summary>
        </member>
        <member name="T:RGN.Modules.Leaderboard.LeaderboardEntry">
            <summary>
            A class that represents an entry in the leaderboard.
            This class serves as a Data Transfer Object (DTO) that contains details about a user's entry in the leaderboard.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntry.userId">
            <summary>
            Gets the unique identifier of the user.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntry.displayName">
            <summary>
            Gets the displayed name of the user.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntry.profilePicture">
            <summary>
            Gets the url of user profile picture.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntry.score">
            <summary>
            Gets the score of the user.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntry.formattedScore">
            <summary>
            Gets the score of the user formatted as a string.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntry.place">
            <summary>
            Gets or sets the rank or place of the user on the leaderboard.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntry.extraData">
            <summary>
            Gets or sets the extra data associated with the user's score entry.
            </summary>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardEntry.ToString">
            <summary>
            Creates a string representation of the LeaderboardEntry.
            </summary>
            <returns>A string that represents the current LeaderboardEntry.</returns>
        </member>
        <member name="T:RGN.Modules.Leaderboard.LeaderboardEntryWithRewards">
            <summary>
            A class that represents an entry in the leaderboard.
            This class serves as a Data Transfer Object (DTO) that contains details about a user's entry in the leaderboard.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntryWithRewards.givenRewards">
            <summary>
            List of rewards that the user failed to earn. This field is only present if the user failed to earn rewards.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardEntryWithRewards.failedRewards">
            <summary>
            List of rewards that the user earned. This field is only present if the user earned rewards.
            </summary>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardEntryWithRewards.ToString">
            <summary>
            Creates a string representation of the LeaderboardEntry.
            </summary>
            <returns>A string that represents the current LeaderboardEntry.</returns>
        </member>
        <member name="T:RGN.Modules.Leaderboard.LeaderboardReset">
            <summary>
            A class that represents an reset history entry in the leaderboard.
            This class serves as a Data Transfer Object (DTO) that contains details about a leaderboard reset data
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardReset.id">
            <summary>
            Gets the unique identifier of the leaderboard reset id.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardReset.resetAt">
            <summary>
            Date and time when the leaderboard will be reset in milliseconds since Jan 1, 1970 UTC.Automatically
            populated by the backend.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:RGN.Modules.Leaderboard.LeaderboardReset.rewardsGivenAt" -->
        <member name="F:RGN.Modules.Leaderboard.LeaderboardReset.totalGivenRewardsCount">
            <summary>
            The total count of given rewards.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardReset.entries">
            <summary>
            List of leaderboard entries with the rewards information.
            </summary>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardReset.ToString">
            <summary>
            Creates a string representation of the LeaderboardReset.
            </summary>
            <returns>A string that represents the current LeaderboardReset.</returns>
        </member>
        <member name="T:RGN.Modules.Leaderboard.LeaderboardReward">
            <summary>
            A class that represents a leaderboard reward on Ready Games Network.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardReward.placeFrom">
            <summary>
            The place from users will be earned
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardReward.placeTo">
            <summary>
            The place to users will be earned
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardReward.achievementId">
            <summary>
            Specifies reward, achievement contains virtual items reward, currency reward, etc
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.LeaderboardReward.quantity">
            <summary>
            Specifies how amount times to trigger an achievement
            </summary>
        </member>
        <member name="M:RGN.Modules.Leaderboard.LeaderboardReward.ToString">
            <summary>
            Creates a string representation of the LeaderboardReward.
            </summary>
            <returns>A string that represents the current LeaderboardReward.</returns>
        </member>
        <member name="T:RGN.Modules.Leaderboard.IsInGracePeriodResponseData">
            <summary>
            Information about the leaderboard's grace period.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsInGracePeriodResponseData.isInGracePeriod">
            <summary>
            Indicates whether the leaderboard is in grace period or not.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsInGracePeriodResponseData.leaderboardEndTime">
            <summary>
            The end time of the leaderboard in milliseconds since midnight, January 1, 1970 UTC.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsInGracePeriodResponseData.gracePeriodEndTime">
            <summary>
            The end time of the grace period in milliseconds since midnight, January 1, 1970 UTC.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsInGracePeriodResponseData.currentTime">
            <summary>
            The current server time in milliseconds since midnight, January 1, 1970 UTC.
            </summary>
        </member>
        <member name="T:RGN.Modules.Leaderboard.IsInPromoPeriodResponseData">
            <summary>
            Information about the leaderboard's promo period.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsInPromoPeriodResponseData.isInPromoPeriod">
            <summary>
            Indicates whether the leaderboard is in promo period or not.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsInPromoPeriodResponseData.leaderboardStartTime">
            <summary>
            The start time of the leaderboard in milliseconds since midnight, January 1, 1970 UTC.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsInPromoPeriodResponseData.promoPeriodStartTime">
            <summary>
            The start time of the promo period in milliseconds since midnight, January 1, 1970 UTC.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsInPromoPeriodResponseData.currentTime">
            <summary>
            The current server time in milliseconds since midnight, January 1, 1970 UTC.
            </summary>
        </member>
        <member name="T:RGN.Modules.Leaderboard.IsLeaderboardAvailableResponseData">
            <summary>
            Availability information
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsLeaderboardAvailableResponseData.isAvailable">
            <summary>
            Indicates whether the leaderboard is available or not.
            </summary>
        </member>
        <member name="F:RGN.Modules.Leaderboard.IsLeaderboardAvailableResponseData.reason">
            <summary>
            The reason why the leaderboard is not available.
            </summary>
        </member>
    </members>
</doc>
